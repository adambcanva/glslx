namespace GLSLX {
  flags SymbolFlags {
    # Keyword modifiers
    ATTRIBUTE
    CONST
    HIGHP
    IN
    INOUT
    LOWP
    MEDIUMP
    OUT
    UNIFORM
    VARYING

    # Internal compiler flags
    EXPORTED
    IMPORTED

    def toString string {
      var text = ""

      if ATTRIBUTE in self { text += "attribute " }
      if CONST in self { text += "const " }
      if UNIFORM in self { text += "uniform " }
      if VARYING in self { text += "varying " }

      if HIGHP in self { text += "highp " }
      if LOWP in self { text += "lowp " }
      if MEDIUMP in self { text += "mediump " }

      if IN in self { text += "in " }
      if INOUT in self { text += "inout " }
      if OUT in self { text += "out " }

      return text
    }
  }

  class Symbol {
    const id int
    var range Range
    var name string
    var scope Scope
    var flags SymbolFlags = 0
    var comments List<string> = null
    var constantValue Node = null
    var requiredExtension string = null
    var _resolvedType Type = null
    var useCount = 0

    # Keyword modifiers
    def isAttribute bool { return .ATTRIBUTE in flags }
    def isConst bool     { return .CONST in flags }
    def isHighp bool     { return .HIGHP in flags }
    def isIn bool        { return .IN in flags }
    def isInout bool     { return .INOUT in flags }
    def isLowp bool      { return .LOWP in flags }
    def isMediump bool   { return .MEDIUMP in flags }
    def isOut bool       { return .OUT in flags }
    def isUniform bool   { return .UNIFORM in flags }
    def isVarying bool   { return .VARYING in flags }
    def isAttributeOrUniform bool { return (.ATTRIBUTE | .UNIFORM) in flags }

    # Internal compiler flags
    def isImported bool { return .IMPORTED in flags }
    def isExported bool { return .EXPORTED in flags }
    def isImportedOrExported bool  { return (.IMPORTED | .EXPORTED) in flags }

    def isStruct bool { return self is StructSymbol }
    def isFunction bool { return self is FunctionSymbol }
    def isVariable bool { return self is VariableSymbol }
    def isArgumentOrLocalVariable bool { return isVariable && (asVariable.kind == .ARGUMENT || asVariable.kind == .LOCAL) }

    def isNative bool {
      return id < 0
    }

    def asStruct StructSymbol {
      assert(isStruct)
      return self as StructSymbol
    }

    def asFunction FunctionSymbol {
      assert(isFunction)
      return self as FunctionSymbol
    }

    def asVariable VariableSymbol {
      assert(isVariable)
      return self as VariableSymbol
    }

    def resolvedType Type {
      if _resolvedType == null {
        _resolvedType = Type.new(self, null, 0)
      }
      return _resolvedType
    }
  }

  class StructSymbol : Symbol {
    var variables List<VariableSymbol> = []
  }

  class FunctionSymbol : Symbol {
    var arguments List<VariableSymbol> = []
    var returnType Node = null
    var block Node = null
    var previousOverload FunctionSymbol = null
    var sibling FunctionSymbol = null # Forward-declared functions are linked to their implementation and vice versa

    def hasSameArgumentTypesAs(function FunctionSymbol) bool {
      if arguments.count != function.arguments.count {
        return false
      }
      for i in 0..arguments.count {
        if arguments[i].type.resolvedType != function.arguments[i].type.resolvedType {
          return false
        }
      }
      return true
    }
  }

  enum VariableKind {
    ARGUMENT
    GLOBAL
    LOCAL
    STRUCT
  }

  class VariableSymbol : Symbol {
    var kind VariableKind
    var type Node = null
    var node Node = null
    var arrayCount Node = null

    def value Node {
      return node?.variableInitializer
    }
  }
}
