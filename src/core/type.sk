namespace GLSLX {
  class Type {
    const symbol Symbol
    const isArrayOf Type
    const arrayCount int
    var containsArray = false
    var containsSampler = false
    var _arrayTypes IntMap<Type> = null

    def rootType Type {
      if isArrayOf != null {
        return isArrayOf.rootType
      }
      return self
    }

    # A count of "0" means an array with an unknown size
    def arrayType(count int) Type {
      assert(count >= 0)
      _arrayTypes ?= {}
      var arrayType = _arrayTypes.get(count, null)
      if arrayType == null {
        _arrayTypes[count] = arrayType = Type.new(null, self, count)
        arrayType.containsArray = true
        arrayType.containsSampler = containsSampler
      }
      return arrayType
    }

    def toString string {
      if isArrayOf != null {
        return arrayCount != 0 ? "\(isArrayOf)[\(arrayCount)]" : "\(isArrayOf)[]"
      }
      return symbol.name
    }

    # For index expressions where "0 <= index < indexCount" (so indexCount == 0 means this type is un-indexable)
    def indexCount int {
      switch self {
        case BVEC2, VEC2, IVEC2, MAT2 { return 2 }
        case BVEC3, VEC3, IVEC3, MAT3 { return 3 }
        case BVEC4, VEC4, IVEC4, MAT4 { return 4 }
        default { return arrayCount }
      }
    }

    # For index expressions
    def indexType Type {
      switch self {
        case BVEC2, BVEC3, BVEC4 { return BOOL }
        case VEC2, VEC3, VEC4 { return FLOAT }
        case IVEC2, IVEC3, IVEC4 { return INT }
        case MAT2 { return VEC2 }
        case MAT3 { return VEC3 }
        case MAT4 { return VEC4 }
        default { return isArrayOf }
      }
    }

    # For constructor expressions, returns the number of required elements
    def componentCount int {
      switch self {
        case BOOL, FLOAT, INT { return 1 }
        case BVEC2, VEC2, IVEC2 { return 2 }
        case BVEC3, VEC3, IVEC3 { return 3 }
        case BVEC4, VEC4, IVEC4, MAT2 { return 4 }
        case MAT3 { return 9 }
        case MAT4 { return 16 }
        default { return 0 }
      }
    }

    # For constructor expressions, returns the base element type corresponding to componentCount
    def componentType Type {
      switch self {
        case BOOL, BVEC2, BVEC3, BVEC4 { return BOOL }
        case FLOAT, VEC2, VEC3, VEC4, MAT2, MAT3, MAT4 { return FLOAT }
        case INT, IVEC2, IVEC3, IVEC4 { return INT }
        default { return null }
      }
    }

    # Vector types are the only ones with swizzles
    def isVector bool {
      switch self {
        case BVEC2, BVEC3, BVEC4, IVEC2, IVEC3, IVEC4, VEC2, VEC3, VEC4 { return true }
        default { return false }
      }
    }

    def isMatrix bool {
      switch self {
        case MAT2, MAT3, MAT4 { return true }
        default { return false }
      }
    }

    def hasIntComponents bool {
      switch self {
        case INT, IVEC2, IVEC3, IVEC4 { return true }
        default { return false }
      }
    }

    def hasFloatComponents bool {
      switch self {
        case FLOAT, VEC2, VEC3, VEC4 { return true }
        case MAT2, MAT3, MAT4 { return true }
        default { return false }
      }
    }

    def isIntOrFloat bool {
      return hasIntComponents || hasFloatComponents
    }

    def canUseEqualityOperators bool {
      return !containsSampler && !containsArray
    }

    def _setContainsSampler Type {
      containsSampler = true
      return self
    }
  }

  namespace Type {
    const BOOL = StructSymbol.new(-1, null, "bool", null).resolvedType
    const BVEC2 = StructSymbol.new(-2, null, "bvec2", null).resolvedType
    const BVEC3 = StructSymbol.new(-3, null, "bvec3", null).resolvedType
    const BVEC4 = StructSymbol.new(-4, null, "bvec4", null).resolvedType
    const ERROR = StructSymbol.new(-5, null, "<error>", null).resolvedType
    const FLOAT = StructSymbol.new(-6, null, "float", null).resolvedType
    const INT = StructSymbol.new(-7, null, "int", null).resolvedType
    const IVEC2 = StructSymbol.new(-8, null, "ivec2", null).resolvedType
    const IVEC3 = StructSymbol.new(-9, null, "ivec3", null).resolvedType
    const IVEC4 = StructSymbol.new(-10, null, "ivec4", null).resolvedType
    const MAT2 = StructSymbol.new(-11, null, "mat2", null).resolvedType
    const MAT3 = StructSymbol.new(-12, null, "mat3", null).resolvedType
    const MAT4 = StructSymbol.new(-13, null, "mat4", null).resolvedType
    const SAMPLER2D = StructSymbol.new(-14, null, "sampler2D", null).resolvedType._setContainsSampler
    const SAMPLERCUBE = StructSymbol.new(-15, null, "samplerCube", null).resolvedType._setContainsSampler
    const VEC2 = StructSymbol.new(-16, null, "vec2", null).resolvedType
    const VEC3 = StructSymbol.new(-17, null, "vec3", null).resolvedType
    const VEC4 = StructSymbol.new(-18, null, "vec4", null).resolvedType
    const VOID = StructSymbol.new(-19, null, "void", null).resolvedType

    const BUILT_INS = [
      BOOL,
      BVEC2,
      BVEC3,
      BVEC4,
      FLOAT,
      INT,
      IVEC2,
      IVEC3,
      IVEC4,
      MAT2,
      MAT3,
      MAT4,
      SAMPLER2D,
      SAMPLERCUBE,
      VEC2,
      VEC3,
      VEC4,
    ]
  }
}
