namespace GLSLX.IDE {
  def constantValueToString(node Node) string {
    switch node.kind {
      case .INT { return node.asInt.toString }
      case .BOOL { return node.asBool.toString }
      case .FLOAT { return Emitter.floatToString(node.asFloat, .NORMAL) }

      case .CALL {
        assert(node.callTarget.kind == .TYPE)
        assert(node.callTarget.resolvedType == node.resolvedType)
        var callTarget = node.callTarget
        var text = "\(node.resolvedType)("
        for child = callTarget.nextSibling; child != null; child = child.nextSibling {
          if child.previousSibling != callTarget {
            text += ", "
          }
          text += constantValueToString(child)
        }
        return text + ")"
      }
    }

    return null
  }

  def _tooltipForSymbol(symbol Symbol) string {
    if symbol.isStruct {
      var struct = symbol.asStruct
      var text = "\(struct.flags)struct \(symbol.name)"

      if !struct.isNative {
        text += " {\n"
        for variable in struct.variables {
          text += "  \(_variableTooltipText(variable));\n"
        }
        text += "}"
      }

      return text + ";"
    }

    if symbol.isVariable {
      var variable = symbol.asVariable
      var text = _variableTooltipText(variable)

      if variable.constantValue != null {
        var constantValue = constantValueToString(variable.constantValue)
        if constantValue != null {
          text += " = " + constantValue
        }
      }

      return text + ";"
    }

    if symbol.isFunction {
      var function = symbol.asFunction
      var text = "\(function.flags)\(function.returnType.resolvedType) \(symbol.name)("

      for argument in function.arguments {
        if argument != function.arguments.first {
          text += ", "
        }
        text += _variableTooltipText(argument)
      }

      return text + ");"
    }

    assert(false)
    return null
  }

  def _variableTooltipText(variable VariableSymbol) string {
    var type = variable.type.resolvedType
    var text = "\(variable.flags)\(type.isArrayOf ?? type) \(variable.name)"
    if type.isArrayOf != null {
      text += type.arrayCount != 0 ? "[\(type.arrayCount)]" : "[]"
    }
    return text
  }

  class SymbolQuery {
    const source Source
    const index int

    var resolvedType Type = null
    var symbol Symbol = null
    var range Range = null
    var swizzleName string = null
    var swizzleType Type = null

    def generateTooltip string {
      if swizzleName != null {
        return "\(swizzleType) \(swizzleName);"
      }

      if symbol != null {
        return _tooltipForSymbol(symbol)
      }

      return null
    }

    def run(global Node) {
      _visit(global)
    }

    def _touches(range Range) bool {
      return range.source == source && range.touches(index)
    }

    def _visitSymbol(query Symbol) bool {
      if _touches(query.range) {
        resolvedType = query.resolvedType
        symbol = query
        range = query.range
        return true
      }

      return false
    }

    def _visitVariable(variable VariableSymbol) bool {
      return _visitSymbol(variable) || _visit(variable.type) || _visit(variable.arrayCount) || _visit(variable.value)
    }

    def _visitFunction(function FunctionSymbol) bool {
      for argument in function.arguments {
        if _visitVariable(argument) {
          return true
        }
      }
      return _visitSymbol(function) || _visit(function.returnType) || _visit(function.block)
    }

    def _visitStruct(struct StructSymbol) bool {
      for variable in struct.variables {
        if _visitVariable(variable) {
          return true
        }
      }
      return _visitSymbol(struct)
    }

    def _visit(node Node) bool {
      if node == null {
        return false
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        if _visit(child) {
          return true
        }
      }

      switch node.kind {
        case .NAME {
          if _touches(node.range) {
            resolvedType = node.resolvedType
            symbol = node.symbol
            range = node.range
            return true
          }
        }

        case .TYPE {
          if _touches(node.range) {
            resolvedType = node.resolvedType
            symbol = (resolvedType.isArrayOf ?? resolvedType).symbol
            range = node.range
            return true
          }
        }

        case .DOT {
          if _touches(node.internalRange) {
            resolvedType = node.resolvedType
            if node.dotTarget.resolvedType.isVector {
              swizzleName = node.asString
              swizzleType = node.resolvedType
            } else {
              symbol = node.symbol
            }
            range = node.internalRange
            return true
          }
        }

        case .VARIABLE {
          return _visitVariable(node.symbol.asVariable)
        }

        case .FUNCTION {
          return _visitFunction(node.symbol.asFunction)
        }

        case .STRUCT {
          return _visitStruct(node.symbol.asStruct)
        }
      }

      return false
    }
  }

  class SymbolsQuery {
    const source Source
    const symbols List<Symbol> = []

    def run(global Node) {
      _visit(global)
    }

    def _visit(node Node) {
      switch node.kind {
        case .STRUCT, .FUNCTION {
          _collectSymbol(node.symbol)
        }

        case .VARIABLES {
          for child = node.variablesType.nextSibling; child != null; child = child.nextSibling {
            assert(child.kind == .VARIABLE)
            _collectSymbol(child.symbol)
          }
        }

        case .GLOBAL {
          for child = node.firstChild; child != null; child = child.nextSibling {
            _visit(child)
          }
        }
      }
    }

    def _collectSymbol(symbol Symbol) {
      if symbol.range != null && symbol.range.source == source {
        symbols.append(symbol)
      }
    }
  }

  class RenameQuery {
    const source Source
    const index int
    const ranges List<Range> = []
    var symbol Symbol = null

    def run(global Node) {
      var query = SymbolQuery.new(source, index)
      query.run(global)
      symbol = query.symbol

      if symbol != null {
        _visit(global)

        # Remove overlapping ranges just in case
        var current Range = null
        ranges.sort((a, b) => a.source == b.source
          ? a.start <=> b.start
          : a.source.name <=> b.source.name)
        ranges.removeIf(range => {
          var previous = current
          current = range
          return previous != null && current.overlaps(previous)
        })
      }
    }

    def _appendRange(range Range, check Symbol) {
      # Sanity check the range to make sure it contains the target name
      if check == symbol && range != null && range.toString == symbol.name {
        ranges.append(range)
      }
    }

    def _visitVariable(variable VariableSymbol) {
      _appendRange(variable.range, variable)
      _visit(variable.type)
      _visit(variable.arrayCount)
      _visit(variable.value)
    }

    def _visitFunction(function FunctionSymbol) {
      _appendRange(function.range, function)
      _appendRange(function.range, function.sibling)
      _visit(function.returnType)
      _visit(function.block)

      for argument in function.arguments {
        _visitVariable(argument)
      }
    }

    def _visitStruct(struct StructSymbol) {
      _appendRange(struct.range, struct)

      for variable in struct.variables {
        _visitVariable(variable)
      }
    }

    def _visit(node Node) {
      if node != null {
        for child = node.firstChild; child != null; child = child.nextSibling {
          _visit(child)
        }

        switch node.kind {
          case .NAME { _appendRange(node.range, node.symbol) }
          case .DOT { _appendRange(node.internalRange, node.symbol) }
          case .TYPE { _appendRange(node.range, node.resolvedType.symbol) }
          case .VARIABLE { _visitVariable(node.symbol.asVariable) }
          case .FUNCTION { _visitFunction(node.symbol.asFunction) }
          case .STRUCT { _visitStruct(node.symbol.asStruct) }
        }
      }
    }
  }

  class Completion {
    const kind string
    const name string
    var detail = ""
  }

  class CompletionQuery {
    const source Source
    const index int
    const _map StringMap<Completion> = {}
    var completions List<Completion> = []

    def run(global Node) {
      _addTextualCompletion("keyword", "false")
      _addTextualCompletion("keyword", "true")
      _addTextualCompletion("keyword", "void")

      for type in Type.BUILT_INS {
        _addTextualCompletion("struct", type.symbol.name).detail = _tooltipForSymbol(type.symbol)
      }

      _visit(global, true)
    }

    def _touches(range Range) bool {
      return range != null && range.source == source && range.touches(index)
    }

    def _addTextualCompletion(kind string, name string) Completion {
      var completion Completion
      if name in _map {
        completion = _map[name]
      } else {
        completion = Completion.new(kind, name)
        completions.append(completion)
        _map[name] = completion
      }
      return completion
    }

    def _addSymbolCompletion(symbol Symbol) {
      const kind =
        symbol.isFunction ? "function" :
        symbol.isStruct ? "struct" :
        "variable"
      const completion = _addTextualCompletion(kind, symbol.name)
      if completion.detail != "" {
        completion.detail += "\n"
      }
      completion.detail += _tooltipForSymbol(symbol)
    }

    def _visit(node Node, isGlobal bool) bool {
      if node == null {
        return false
      }

      var touches = _touches(node.range)

      switch node.kind {
        case .FUNCTION {
          _addSymbolCompletion(node.symbol)
          if touches {
            var function = node.symbol.asFunction
            _addTextualCompletion("keyword", "discard")
            _addTextualCompletion("keyword", "return")
            for arg in function.arguments {
              _addSymbolCompletion(arg)
            }
            _visit(function.block, false)
          }
        }

        case .VARIABLE {
          _addSymbolCompletion(node.symbol)
        }

        case .STRUCT {
          _addSymbolCompletion(node.symbol)
        }

        case .FOR, .WHILE, .DO_WHILE {
          if touches {
            _addTextualCompletion("keyword", "break")
            _addTextualCompletion("keyword", "continue")
          }
        }

        case .DOT {
          const dotTarget = node.dotTarget
          if touches && !_touches(dotTarget.range) {
            completions = []
            const type = dotTarget.resolvedType

            switch type {
              case .BVEC2, .IVEC2, .VEC2, .BVEC3, .IVEC3, .VEC3, .BVEC4, .IVEC4, .VEC4 {
                for set in Swizzle.strings(type.componentCount) {
                  for count = 1; count <= 4; count++ {
                    var counters List<int> = []
                    for i = 0; i < count; i++ {
                      counters.append(0)
                    }

                    # Generate all valid permutations
                    while true {
                      var name = ""
                      for i = 0; i < count; i++ {
                        name += set.get(counters[i])
                      }
                      const symbol = Swizzle.type(type.componentType, name.count).symbol
                      _addTextualCompletion("variable", name).detail = "\(symbol.name) \(name);"

                      # Increment and carry
                      var i = 0
                      while i < count {
                        var counter = counters[i]
                        if ++counter == set.count {
                          counter = 0
                        }
                        counters[i] = counter
                        if counter != 0 {
                          break
                        }
                        i++
                      }
                      if i == count {
                        break
                      }
                    }
                  }
                }
              }

              default {
                if type.symbol != null && type.symbol.isStruct {
                  for variable in type.symbol.asStruct.variables {
                    _addSymbolCompletion(variable)
                  }
                }
              }
            }

            return true
          }
        }
      }

      if isGlobal || touches || node.kind == .VARIABLES {
        for child = node.firstChild; child != null; child = child.nextSibling {
          if _visit(child, false) {
            return true
          }
        }
      }

      return touches
    }
  }

  class Signature {
    const text string
    const arguments List<string>
  }

  class SignatureQuery {
    const source Source
    const index int
    const signatures List<Signature> = []
    var activeArgument = -1
    var activeSignature = -1

    def run(global Node) {
      _visit(global)
    }

    def _touches(range Range) bool {
      return range != null && range.source == source && range.touches(index)
    }

    def _visit(node Node) bool {
      if node == null {
        return false
      }

      if node.kind != .GLOBAL && !_touches(node.range) {
        return false
      }

      for child = node.firstChild; child != null; child = child.nextSibling {
        if _visit(child) {
          return true
        }
      }

      switch node.kind {
        case .FUNCTION {
          _visit(node.symbol.asFunction.block)
          return true
        }

        case .CALL {
          var callTarget = node.callTarget

          if !_touches(callTarget.range) {
            var firstArgument = callTarget.nextSibling
            var type = callTarget.resolvedType
            var symbol = type.symbol
            var arguments List<Node> = []

            for arg = firstArgument; arg != null; arg = arg.nextSibling {
              arguments.append(arg)
            }

            if symbol.isFunction {
              var overloads List<FunctionSymbol> = []

              # Collect all relevant overloads but ignore forward-declared functions that also have an implementation
              for overload = symbol.asFunction; overload != null; overload = overload.previousOverload {
                if !(overload.sibling in overloads) {
                  overloads.append(overload)
                }
              }

              # Show overloads in source order
              overloads.reverse

              for overload in overloads {
                signatures.append(Signature.new(
                  _tooltipForSymbol(overload),
                  overload.arguments.map<string>(arg => _variableTooltipText(arg))
                ))
              }

              # Pick an active overload
              if !signatures.isEmpty {
                activeSignature = 0

                # Start off with all overloads
                var filteredOverloads List<int> = []
                for i = 0; i < overloads.count; i++ {
                  filteredOverloads.append(i)
                }

                # Try filtering by argument count
                for limit = arguments.count; limit > 0; limit-- {
                  var nextFilteredOverloads List<int> = []
                  for index in filteredOverloads {
                    if overloads[index].arguments.count >= limit {
                      nextFilteredOverloads.append(index)
                    }
                  }
                  if !nextFilteredOverloads.isEmpty {
                    filteredOverloads = nextFilteredOverloads
                    break
                  }
                }

                # Narrow down by argument types
                if filteredOverloads.count > 1 {
                  var nextFilteredOverloads = filteredOverloads.clone
                  nextFilteredOverloads.removeIf(overloadIndex => {
                    var fromArguments = overloads[overloadIndex].arguments
                    for i in 0..Math.min(fromArguments.count, arguments.count) {
                      var from = fromArguments[i].type.resolvedType
                      var to = arguments[i].resolvedType
                      if to != .ERROR && from != to {
                        return true
                      }
                    }
                    return false
                  })

                  # Narrow down by argument types with "conversions" to get better error messages
                  if nextFilteredOverloads.isEmpty {
                    nextFilteredOverloads = filteredOverloads.clone
                    nextFilteredOverloads.removeIf(overloadIndex => {
                      var fromArguments = overloads[overloadIndex].arguments
                      for i in 0..Math.min(fromArguments.count, arguments.count) {
                        var from = fromArguments[i].type.resolvedType
                        var to = arguments[i].resolvedType
                        var fromSize = from.componentCount
                        var toSize = to.componentCount
                        if to != .ERROR && from != to && (fromSize == 0 || toSize == 0 || fromSize != toSize) {
                          return true
                        }
                      }
                      return false
                    })
                  }

                  if !nextFilteredOverloads.isEmpty {
                    filteredOverloads = nextFilteredOverloads
                  }
                }

                if !filteredOverloads.isEmpty {
                  activeSignature = filteredOverloads[0]
                }
              }
            }

            if symbol.isStruct && type.componentType == null {
              # Generate the constructor call signature
              var fields = symbol.asStruct.variables.map<string>(arg => _variableTooltipText(arg))
              signatures.append(Signature.new(
                "\(symbol.name)(\(", ".join(fields)));",
                fields
              ))
              activeSignature = 0
            }

            # Compute the active argument index
            if !arguments.isEmpty {
              activeArgument = 0
              for arg in arguments {
                if index <= arg.range.end || arg.nextSibling == null {
                  break
                }
                activeArgument++
              }
            }

            return true
          }
        }
      }

      return false
    }
  }
}
