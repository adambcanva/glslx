namespace GLSLX {
  enum DiagnosticKind {
    ERROR
    WARNING
  }

  class Diagnostic {
    var kind DiagnosticKind
    var range Range
    var text string
    var noteRange Range = null
    var noteText = ""
  }

  namespace Diagnostic {
    def format(kind string, range Range, text string) string {
      if range == null {
        return "\(kind): \(text)\n"
      }
      var formatted = range.format(0)
      return "\(range.locationString): \(kind): \(text)\n\(formatted.line)\n\(formatted.range)\n"
    }
  }

  class Log {
    var diagnostics List<Diagnostic> = []
    var warningCount = 0
    var errorCount = 0

    def toString string {
      var builder = StringBuilder.new

      # Emit the log assuming an infinite terminal width
      for diagnostic in diagnostics {
        builder.append(Diagnostic.format(diagnostic.kind == .ERROR ? "error" : "warning", diagnostic.range, diagnostic.text))

        # Append notes after the diagnostic they apply to
        if diagnostic.noteRange != null {
          builder.append(Diagnostic.format("note", diagnostic.noteRange, diagnostic.noteText))
        }
      }

      return builder.toString
    }

    def isEmpty bool {
      return diagnostics.isEmpty
    }

    def hasErrors bool {
      return errorCount != 0
    }

    def hasWarnings bool {
      return warningCount != 0
    }

    def error(range Range, text string) {
      diagnostics.append(Diagnostic.new(.ERROR, range, text))
      errorCount++
    }

    def warning(range Range, text string) {
      diagnostics.append(Diagnostic.new(.WARNING, range, text))
      warningCount++
    }

    def note(range Range, text string) {
      var last = diagnostics.last
      last.noteRange = range
      last.noteText = text
    }
  }

  class Log {
    def syntaxWarningUnknownExtension(range Range, name string) {
      warning(range, "The extension \"\(name)\" is not in the known list of valid WebGL extensions")
    }

    def syntaxErrorInvalidString(range Range) {
      error(range, "Invalid string literal")
    }

    def syntaxErrorDisabledExtension(range Range, name string, extension string) {
      error(range, "Cannot use \"\(name)\" from disabled extension \"\(extension)\"")
    }

    def syntaxErrorExtraData(range Range, text string) {
      error(range, "Syntax error \"\(text)\"")
    }

    def syntaxErrorReservedWord(range Range) {
      error(range, "\"\(range)\" is a reserved word")
    }

    def syntaxErrorUnexpectedToken(token Token) {
      error(token.range, "Unexpected \(token.kind)")
    }

    def syntaxErrorExpectedToken(range Range, expected TokenKind) {
      error(range, "Expected \(expected)")
    }

    def syntaxErrorExpectedToken(range Range, found TokenKind, expected TokenKind) {
      error(range, "Expected \(expected) but found \(found)")
    }

    def syntaxErrorBadSymbolReference(range Range) {
      error(range, "There is no symbol called \"\(range)\" in the current scope")
    }

    def syntaxErrorDuplicateSymbolDefinition(range Range, previous Range) {
      error(range, "There is already a symbol called \"\(range)\" in the current scope")
      note(previous, "The previous definition of \"\(previous)\" is here")
    }

    def syntaxErrorOutsideLoop(range Range) {
      error(range, "This statement cannot be used outside a loop")
    }

    def syntaxErrorStructVariableInitializer(range Range) {
      error(range, "Cannot initialize struct variables")
    }

    def syntaxErrorInsideStruct(range Range) {
      error(range, "This statement cannot be used inside a struct")
    }

    def syntaxErrorInsideFunction(range Range) {
      error(range, "This statement cannot be used inside a function")
    }

    def syntaxErrorOutsideFunction(range Range) {
      error(range, "This statement cannot be used outside a function")
    }

    def syntaxErrorIncludeOutsideGlobal(range Range) {
      error(range, "\"#include\" statements cannot be used here")
    }

    def semanticErrorIncludeWithoutFileAccess(range Range) {
      error(range, "Cannot include files without access to a file system")
    }

    def semanticErrorIncludeBadPath(range Range, path string) {
      error(range, "Cannot read the file \(dynamic.JSON.stringify(path))")
    }

    def syntaxErrorDifferentReturnType(range Range, name string, type Type, expected Type, previous Range) {
      error(range, "Cannot change the return type of \"\(name)\" to type \"\(type)\"")
      note(previous, "The forward declaration of \"\(name)\" has a return type of \"\(expected)\"")
    }

    def syntaxErrorBadQualifier(range Range) {
      error(range, "Cannot use this qualifier here")
    }

    def syntaxErrorConstantRequired(range Range) {
      error(range, "This value must be a compile-time constant")
    }

    def syntaxErrorInvalidArraySize(range Range, count int) {
      error(range, "Cannot declare an array with a size of \"\(count)\"")
    }

    def syntaxErrorMissingArraySize(range Range) {
      error(range, "All array sizes must be specified")
    }

    def syntaxErrorMultidimensionalArray(range Range) {
      error(range, "Multidimensional arrays are not a part of the language")
    }

    def syntaxErrorInvalidOperator(range Range) {
      error(range, "The operator \"\(range)\" is reserved and cannot be used")
    }
  }

  class Log {
    def semanticErrorBadConversion(range Range, from Type, to Type) {
      error(range, "Cannot convert from type \"\(from)\" to type \"\(to)\"")
    }

    def semanticErrorUnexpectedType(range Range, type Type) {
      error(range, "Unexpected type \"\(type)\"")
    }

    def semanticErrorBadVariableType(range Range, type Type) {
      error(range, "Cannot create a variable of type \"\(type)\"")
    }

    def semanticErrorBadMember(range Range, type Type, name string) {
      error(range, "Cannot find \"\(name)\" on type \"\(type)\"")
    }

    def semanticErrorBadSwizzle(range Range, type Type, name string) {
      error(range, "Invalid swizzle \"\(name)\" on type \"\(type)\"")
    }

    def semanticErrorBadSwizzleAssignment(range Range, field string) {
      error(range, "The field \"\(field)\" cannot be specified multiple times when used as a storage location")
    }

    def semanticErrorMustCallFunction(range Range, name string) {
      error(range, "The function \"\(name)\" must be called")
    }

    def semanticErrorBadCall(range Range, type Type) {
      error(range, "Cannot call type \"\(type)\"")
    }

    def semanticErrorBadConstructorValue(range Range, type Type, constructor Type) {
      error(range, "Cannot use value of type \"\(type)\" when constructing type \"\(constructor)\"")
    }

    def semanticErrorExtraConstructorValue(range Range, type Type, count int, total int) {
      error(range, "The constructor for type \"\(type)\" only takes \(count) argument\(plural(count)) and this argument would bring the total to \(total)")
    }

    def semanticErrorBadConstructorCount(range Range, type Type, count int) {
      error(range, "Cannot construct type \"\(type)\" with \(count) argument\(plural(count))")
    }

    def semanticErrorArgumentCountFunction(range Range, expected int, found int, name string, function Range) {
      error(range, "Expected \(expected) argument\(plural(expected)) but found \(found) argument\(plural(found)) when calling function \"\(name)\"")
      if function != null {
        note(function, "The definition of function \"\(name)\" is here")
      }
    }

    def semanticErrorArgumentCountConstructor(range Range, expected int, found int, name string, struct Range) {
      error(range, "Expected \(expected) argument\(plural(expected)) but found \(found) argument\(plural(found)) when constructing type \"\(name)\"")
      if struct != null {
        note(struct, "The definition of struct \"\(name)\" is here")
      }
    }

    def semanticErrorBadOverloadMatch(range Range, name string) {
      error(range, "No matching overload for function \"\(name)\"")
    }

    def semanticErrorBadHookTypes(range Range, left Type, right Type) {
      error(range, "Cannot merge type \"\(left)\" and type \"\(right)\"")
    }

    def semanticErrorArrayHook(range Range, type Type) {
      if type.isArrayOf != null {
        error(range, "Cannot use a conditional expression with array type \"\(type)\"")
      } else {
        error(range, "Cannot use a conditional expression with type \"\(type)\" because it contains an array")
      }
    }

    def semanticErrorArrayAssignment(range Range, type Type) {
      if type.isArrayOf != null {
        error(range, "Cannot assign to array type \"\(type)\"")
      } else {
        error(range, "Cannot assign to type \"\(type)\" because it contains an array")
      }
    }

    def semanticErrorBadUnaryOperator(range Range, operator string, type Type) {
      error(range, "No unary operator \"\(operator)\" for type \"\(type)\"")
    }

    def semanticErrorBadBinaryOperator(range Range, operator string, left Type, right Type) {
      if left == right {
        error(range, "There is no operator \"\(operator)\" defined for type \"\(left)\"")
      } else {
        error(range, "No binary operator \"\(operator)\" for type \"\(left)\" and type \"\(right)\"")
      }
    }

    def semanticErrorBadIndex(range Range, left Type, right Type) {
      error(range, "No index operator for type \"\(left)\" and type \"\(right)\"")
    }

    def semanticErrorOutOfBoundsIndex(range Range, value int, type Type) {
      error(range, "Index \"\(value)\" is out of bounds for type \"\(type)\"")
    }

    def semanticErrorBadStorage(range Range) {
      error(range, "Cannot store to this location")
    }

    def semanticErrorUninitializedConstant(range Range) {
      error(range, "Constants must be initialized")
    }

    def semanticErrorMissingReturn(range Range, name string, type Type) {
      error(range, "All control paths for \"\(name)\" must return a value of type \"\(type)\"")
    }

    def semanticErrorBadMatrixConstructor(range Range) {
      error(range, "If a matrix argument is given to a matrix constructor, it is an error to have any other arguments")
    }
  }

  namespace Log {
    def plural(value int) string {
      return value != 1 ? "s" : ""
    }
  }
}
